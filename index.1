.\" generated with Ronn/v0.6.6
.\" http://github.com/rtomayko/ronn/
.
.TH "CONNECT" "1" "June 2010" "" ""
.
.SH "NAME"
\fBconnect\fR \- node server runner
.
.SH "Synopsis"
.
.nf

connect [\-H|\-\-host ADDR] [\-p|\-\-port NUM]
        [\-n|\-\-workers NUM] [\-I|\-\-include PATH]
        [\-E|\-\-env ENV] [\-e|\-\-eval CODE] [\-C|\-\-chdir PATH]
        [\-c|\-\-config PATH] [\-P|\-\-pidfile PATH]
        [\-l|\-\-logfile PATH] [\-u|\-\-user ID|USER] [\-g|\-\-group ID|GROUP]
        [\-v|\-\-verbose] [\-V|\-\-version] [\-K|\-\-no\-color]
        [\-h|\-\-help] [\-\-ENV VAL]
        start|stop|restart|status [PATH]
.
.fi
.
.SH "Description"
Connect is a dual purpose library, aiding in both rapid development, and deployment of node servers\. Connect \"middleware\" can be stacked to create a robust application within minutes\. The \fIconnect\fR executable supports launching of both regular \fBnet\.Server\fR, and \fBconnect\.Server\fR instances\.
.
.P
The connect executable supplies \fIinit\.d\fR friendly \fIstart\fR, \fIstop\fR, and \fIrestart\fR commands, and accept a direct path to the module meant to be run, otherwise defaults to trying both \fIapp\.js\fR and \fIserver\.js\fR in the current working directory\.
.
.P
Also to check the status of a process you may use the \fIstatus\fR command, which checks if the process is running\.
.
.SH "Executable Options"
.
.nf

\-H, \-\-host ADDR       Host address, defaults to INADDR_ANY
\-p, \-\-port NUM        Port number, defaults to 3000
\-n, \-\-workers NUM     Number of worker processes to spawn
\-I, \-\-include PATH    Unshift the given path to require\.paths
\-E, \-\-env ENV         Set environment, defaults to \"development\"
\-e, \-\-eval CODE       Evaluate the given string
\-C, \-\-chdir PATH      Change to the given path
\-c, \-\-config PATH     Load configuration module
\-P, \-\-pidfile PATH    PID file, defaults to pids/connect\.pid
\-l, \-\-logfile PATH    Log file, defaults to logs/connect\.log
\-u, \-\-user ID|USER    Change user with setuid()
\-g, \-\-group ID|GROUP  Change group with setgid()
\-v, \-\-verbose         Display verbose output
\-V, \-\-version         Output connect version
\-K, \-\-no\-color        Suppress colored terminal output
\-h, \-\-help            Display help information
\-\-ENV VAL             Sets the given connect environment variable
.
.fi
.
.SH "Supported Environment Variables"
Currently the following environment variables may be set via the \fB\-\-ENV VAL\fR catchall\. For example we can alter the log format used via the command line with `connect \-\-logFormat \":method :uri\"\.
.
.P
Boolean values may use strings such as \fIyes\fR, \fIno\fR, \fItrue\fR, \fIfalse\fR\.
.
.IP "" 4
.
.nf

\-\-logFormat STR           Custom log format
\-\-dumpExceptions BOOL     Dump exceptions to stderr
\-\-showErrorMessage BOOL   Show exception message in response (recommended for development only)
\-\-showErrorStack BOOL     Show exception stack trace (recommended for development only)
\-\-methodOverrideKey STR   Override the default method key of \"_method\"
\-\-sassRoot PATH           Public sass conversion root path
\-\-staticRoot PATH         Public static file root path
.
.fi
.
.IP "" 0
.
.SH "Middleware"
Connect middleware is divided into two concepts\. First we have \fIfilters\fR which perform an action and allow lower middleware to respond to the request, secondly we have \fIproviders\fR which are conceptual \"end\-points\", responding to the request without continuing down the stack\.
.
.SH "Middleware Usage"
Below is an example which shows usage of the \fIlog\fR filter bundled with Connect, as well as the \fIstatic\fR provider\.
.
.P
The keys \fBfilter\fR and \fBprovider\fR are used only as short\-cuts to bundled middleware, to utilize a custom module we can assign a module\'s exports to the \fBmodule\fR key\.
.
.IP "" 4
.
.nf

module\.exports = require(\'\./lib/connect\')\.createServer([
    { filter: \'log\' },
    { module: require(\'path/to/custom/middleware\') },
    { provider: \'static\', root: __dirname + \'/public\' }
]);
.
.fi
.
.IP "" 0
.
.P
As shown above the module exports a \fBconnect\.Server\fR and does not call the \fBlisten()\fR method directly\. This allows other modules to \"mount\" this app, as well as allowing the \fIconnect\fR executable to control how the server is run\.
.
.P
If you prefer not to use \fIconnect\fR, you can simply create a script executable by \fInode\fR, \fBrequire()\fR the app, then invoke \fBlisten()\fR\.
.
.IP "" 4
.
.nf

#!/usr/bin/env node
require(\'\./app\')\.listen();
.
.fi
.
.IP "" 0
.
.SH "Middleware Authoring"
Middleware is essentially just an object, responding to a \fBhandle()\fR method, the example below illustrates how simple it is to create, and utilize custom middleware\.
.
.P
First we define the \fBhandle()\fR method, which accepts three arguments, \fIreq\fR, \fIres\fR, and \fInext\fR\.
.
.IP "" 4
.
.nf

var helloWorld = {
    handle: function(req, res, next){
        res\.writeHead(200, { \'Content\-Type: \'text/plain\' });
        res\.end(\'Hello World\');
    }
};

require(\'connect\')\.createServer([
    { module: helloWorld }
]);
.
.fi
.
.IP "" 0
.
.P
The \fBnext()\fR function passes control to the next middleware layer in the stack, and may optionally be passed an instanceof \fBError\fR, at which time only \fBhandleError()\fR methods may respond\.
.
.P
If you wish to pass an exception down the stack, you can invoke \fBnext()\fR like below:
.
.IP "" 4
.
.nf

 if (someRequirementIsNotMet) {
     next(new Error(\'my requirement was not met!\'));
 }
.
.fi
.
.IP "" 0
.
.P
We can take this example further by \"exporting\" the \fBhandle()\fR method, so that other libraries can simply \fBrequire(\'hello\-world\')\fR:
.
.IP "" 4
.
.nf

# hello\-world\.js
exports\.handle = function(req, res, next){
    res\.writeHead(200, { \'Content\-Type: \'text/plain\' });
    res\.end(\'Hello World\');
};

# app\.js
require(\'connect\')\.createServer([
    { module: require(\'\./hello\-world\') }
]);
.
.fi
.
.IP "" 0
.
.SS "Exception Handling"
If an exception was thrown, or is passed to \fBnext()\fR, middleware may define the \fBhandleError()\fR method in order to respond (or ignore) the exception\. The \fBhandleError()\fR method follows the same semantics as \fBhandle()\fR, for example:
.
.IP "" 4
.
.nf

exports\.handleError = function(err, req, res, next){
    // At any time we can call next() without
    // any arguments to eliminate exceptional status and
    // continue down the stack

    if (err\.code === process\.ENOENT) {
        // We dont want to deal with missing files
        // so pass the exception
        next(err);
    } else {
        // Respond with a message
        res\.writeHead(200, { \'Content\-Type\': \'text/plain\' })
        res\.end(\'shit! im broken\');
    }
};
.
.fi
.
.IP "" 0
.
.SS "Setup Configuration"
Connect also supports the \fBsetup()\fR method, which is called when the middleware is stacked, and is passed the environment\. For example lets say we want our \fIlog\fR middleware to support a custom format, we might define \fBsetup()\fR as shown below:
.
.IP "" 4
.
.nf

var log = {};

log\.setup = function(env) {
    this\.format = this\.format || \'our default format\';
}
.
.fi
.
.IP "" 0
.
.P
Allowing developers to pass a custom format when stacked:
.
.IP "" 4
.
.nf

connect\.createServer([
    { module: log, format: \'custom log format\' }
]);
.
.fi
.
.IP "" 0
.
.P
In some cases we may want to support changes through the environment as well\. For example we may want to support \fBconnect \-\-logFormat \"super cool format\"\fR, to do all we need to do is check for \fBenv\.logFormat\fR as shown below\. The precedence given is up to you, however the env is recommended\.
.
.IP "" 4
.
.nf

log\.setup = function(env) {
    this\.format = env\.logFormat || this\.format || \'our default format\';
}
.
.fi
.
.IP "" 0
.
.SH "Bundled Middleware"
Connect ships with several helpful middleware modules, the following are currently provided out of the box:
.
.SS "Filters"
.
.nf

body\-decoder     Buffers and parses json and urlencoded request bodies (extenable)
conditional\-get  Provides 304 \"Not Modified\" support
error\-handler    Handles exceptions thrown, or passed through the stack
debug            Outputs debugging console to all html responses
format           Handles url path extensions or \"formats\"
gzip             Compresses response bodies with gzip executable
lint             Aids in middleware development
log              Provides common logger support, and custom log formats
method\-override  Provides faux HTTP method support by using the \"_method\" key by default
response\-time    Responds with the X\-Response\-Time header in milliseconds
redirect         Provides req\.redirect() with \"magic\" urls, ex: req\.redirect(\"back\")
.
.fi
.
.SS "Providers"
.
.nf

cache\-manifest   Provides cache manifest for offline apps
jsonrpc          Provides JSON\-RPC 2\.0 support
sass             Provides auto\-compilation of *\.sass files
static           Serves static files
rest             Provides RESTful routing similar to Sinatra and Express
.
.fi
.
.SS "Body Decoder"
The \fIbody\-decoder\fR middleware sniffs the \fIContent\-Type\fR header, and decodes the request body appropriately\. Supported by default are the \fIapplication/x\-www\-form\-urlencoded\fR, and \fIapplication/json\fR content types\. To extend simply:
.
.IP "" 4
.
.nf

require(\'connect/filters/body\-decoder\')\.decode[\'some\-mime/type\'] = function(str){
    return decodeSomething(str);
};
.
.fi
.
.IP "" 0

